spring:
  h2:
    console:
      enabled: true
  jpa:
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL57Dialect
        storage_engine: innodb
#  datasource:
#    url: jdbc:h2:mem:testdb;MODE=MYSQL
#    username: sa
  profiles:
      group:
        default: oauth,real-db
  # store-type: jdbc => 세션을 DB에서 관리한다. redis 선택 가능.
  session:
    store-type: jdbc

# @TODO application-oauth.yml
# https://console.cloud.google.com
# https://developers.naver.com/apps/#/register?api=nvlogin
# spring:
#   security:
#     oauth2:
#       client:
#         registration:
#           google:
#             client-id: @TODO
#             client-secret: @TODO
#             scope: profile,email
#           # 네이버는 Spring Security를 공식 지원하지 않기 때문에 CommonOAuth2Provider 에서 해주는 값들을 수동으로 입력한다.
#           naver:
#             client-id: @TODO
#             client-secret: @TODO
#             redirect_uri_template: "{baseUrl}/{action}/oauth2/code/{registrationId}"
#             authorization_grant_type: authorization_code
#             scope: name,email,profile_image
#             client-name: Naver
#         provider:
#           naver:
#             authorization_uri: https://nid.naver.com/oauth2.0/authorize
#             token_uri: https://nid.naver.com/oauth2.0/token
#             user-info-uri: https://openapi.naver.com/v1/nid/me
#             # 기준이 되는 user_name 의 이름을 네이버에서는 response로 지정해야한다. (네이버 회원 조회시 반환되는 JSON 형태 때문이다)
#             # response를 user_name으로 지정하고 이후 자바 코드로 response의 id를 user_name으로 지정한다. (스프링 시큐리티에서 하위 필드를 명시할 수 없기 때문)
#             user_name_attribute: response


# @TODO application-real-db.yml
# spring:
#   jpa:
#     hibernate:
#       ddl-auto: none
#   datasource:
#     url: jdbc:mariadb://192.168.100.148:3306/msaportal
#     username: @TODO
#     password: @TODO
#     driver-class-name: org.mariadb.jdbc.Driver